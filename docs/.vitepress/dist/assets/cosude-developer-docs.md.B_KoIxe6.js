import{_ as o,c as i,o as a,ae as t}from"./chunks/framework.CBTkueSR.js";const h=JSON.parse('{"title":"developer-docs","description":"Document from d:\\\\Documents\\\\rust-projects\\\\old\\\\COsuDE\\\\developer-docs.md","frontmatter":{"title":"developer-docs","description":"Document from d:\\\\Documents\\\\rust-projects\\\\old\\\\COsuDE\\\\developer-docs.md","date":"2025-10-05T00:00:00.000Z"},"headers":[],"relativePath":"cosude-developer-docs.md","filePath":"cosude-developer-docs.md"}'),n={name:"cosude-developer-docs.md"};function s(r,e,l,d,c,u){return a(),i("div",null,[...e[0]||(e[0]=[t('<h1 id="cosude-developer-documentation" tabindex="-1">COsuDE Developer Documentation <a class="header-anchor" href="#cosude-developer-documentation" aria-label="Permalink to &quot;COsuDE Developer Documentation&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>COsuDE is a Rust-based typing game built with the Bevy game engine. Players type falling words to score points, with difficulty levels and penalties for mistakes. The game features a sci-fi aesthetic with neon colors and animations.</p><h2 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;Architecture&quot;">​</a></h2><p>The project follows Bevy&#39;s ECS (Entity Component System) architecture. The main application is set up in <code>main.rs</code>, with game logic split across modules. States manage screen transitions, and systems handle updates.</p><h3 id="project-structure" tabindex="-1">Project Structure <a class="header-anchor" href="#project-structure" aria-label="Permalink to &quot;Project Structure&quot;">​</a></h3><ul><li><code>src/main.rs</code>: Application entry point and setup</li><li><code>src/components.rs</code>: Entity components and resources</li><li><code>src/states.rs</code>: Game state definitions</li><li><code>src/config.rs</code>: Constants and configuration</li><li><code>src/words.rs</code>: Word list for gameplay</li><li><code>src/systems.rs</code>: Utility systems (camera setup)</li><li><code>src/ui.rs</code>: UI spawning and management</li><li><code>src/menu.rs</code>: Menu and difficulty selection logic</li><li><code>src/game.rs</code>: Core gameplay systems</li></ul><h2 id="dependencies" tabindex="-1">Dependencies <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;Dependencies&quot;">​</a></h2><ul><li><code>bevy = &quot;0.13&quot;</code>: Game engine providing ECS, rendering, input, etc.</li><li><code>rand = &quot;0.8&quot;</code>: Random number generation for word shuffling</li></ul><h2 id="key-components-and-resources" tabindex="-1">Key Components and Resources <a class="header-anchor" href="#key-components-and-resources" aria-label="Permalink to &quot;Key Components and Resources&quot;">​</a></h2><h3 id="components-components-rs" tabindex="-1">Components (<code>components.rs</code>) <a class="header-anchor" href="#components-components-rs" aria-label="Permalink to &quot;Components (`components.rs`)&quot;">​</a></h3><ul><li><code>FallingWord</code>: Represents a falling word with text, typed portion, and completion status</li><li><code>Velocity</code>: Movement vector for falling entities</li><li><code>FadeOut</code>: Timer for fade-out animations</li><li><code>Flash</code>: Temporary color flash effect with timer</li><li><code>DifficultyButton</code>: Marker for difficulty selection buttons</li><li>UI Components: <code>LoadingUI</code>, <code>MenuUI</code>, <code>StartButton</code>, <code>QuitButton</code>, <code>HighScoreText</code>, <code>DifficultyUI</code>, <code>PlayingUI</code>, <code>CurrentScoreText</code></li></ul><h3 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">​</a></h3><ul><li><code>Score</code>: Current and high score tracking</li><li><code>SelectedDifficulty</code>: Chosen difficulty level</li><li><code>ClearColor</code>: Background color</li></ul><h3 id="enums" tabindex="-1">Enums <a class="header-anchor" href="#enums" aria-label="Permalink to &quot;Enums&quot;">​</a></h3><ul><li><code>Difficulty</code>: Easy (5 words), Medium (10 words), Hard (all words)</li><li><code>GameState</code>: Loading, Menu, DifficultySelect, Playing, Score</li></ul><h2 id="systems-and-functions" tabindex="-1">Systems and Functions <a class="header-anchor" href="#systems-and-functions" aria-label="Permalink to &quot;Systems and Functions&quot;">​</a></h2><h3 id="core-systems-main-rs" tabindex="-1">Core Systems (<code>main.rs</code>) <a class="header-anchor" href="#core-systems-main-rs" aria-label="Permalink to &quot;Core Systems (`main.rs`)&quot;">​</a></h3><ul><li><code>setup_camera</code>: Spawns 2D camera on startup</li><li>State transitions managed via <code>NextState&lt;GameState&gt;</code></li></ul><h3 id="ui-systems-ui-rs" tabindex="-1">UI Systems (<code>ui.rs</code>) <a class="header-anchor" href="#ui-systems-ui-rs" aria-label="Permalink to &quot;UI Systems (`ui.rs`)&quot;">​</a></h3><ul><li><code>spawn_loading_ui</code>: Creates loading screen text</li><li><code>despawn_loading_ui</code>: Removes loading UI</li><li><code>spawn_menu_ui</code>: Creates main menu with title, high score, start/quit buttons</li><li><code>despawn_menu_ui</code>: Removes menu UI</li><li><code>spawn_difficulty_ui</code>: Creates difficulty selection screen</li><li><code>despawn_difficulty_ui</code>: Removes difficulty UI</li><li><code>spawn_playing_ui</code>: Creates in-game score display</li><li><code>despawn_playing_ui</code>: Removes playing UI</li></ul><h3 id="menu-systems-menu-rs" tabindex="-1">Menu Systems (<code>menu.rs</code>) <a class="header-anchor" href="#menu-systems-menu-rs" aria-label="Permalink to &quot;Menu Systems (`menu.rs`)&quot;">​</a></h3><ul><li><code>loading_system</code>: Timer-based transition from loading to menu</li><li><code>menu_button_system</code>: Handles start/quit button interactions and state changes</li><li><code>update_high_score_text</code>: Updates high score display</li><li><code>update_current_score_text</code>: Updates current score during gameplay</li><li><code>difficulty_select_system</code>: Handles difficulty button interactions</li></ul><h3 id="gameplay-systems-game-rs" tabindex="-1">Gameplay Systems (<code>game.rs</code>) <a class="header-anchor" href="#gameplay-systems-game-rs" aria-label="Permalink to &quot;Gameplay Systems (`game.rs`)&quot;">​</a></h3><ul><li><code>spawn_words</code>: Creates falling word entities based on selected difficulty</li><li><code>falling_system</code>: Updates word positions downward</li><li><code>typing_system</code>: Processes keyboard input, updates typed text, handles penalties/completions</li><li><code>update_text_system</code>: Updates word text rendering with colors and flash effects</li><li><code>fade_system</code>: Handles fade-out animations for completed words</li><li><code>win_condition_system</code>: Checks for game completion and resets</li></ul><h2 id="gameplay-flow" tabindex="-1">Gameplay Flow <a class="header-anchor" href="#gameplay-flow" aria-label="Permalink to &quot;Gameplay Flow&quot;">​</a></h2><ol><li><strong>Loading</strong>: 2-second loading screen</li><li><strong>Menu</strong>: Display high score, start/quit options</li><li><strong>Difficulty Select</strong>: Choose Easy/Medium/Hard</li><li><strong>Playing</strong>: Type falling words, avoid penalties, complete all words to win</li><li><strong>Win</strong>: Return to menu with updated high score</li></ol><h2 id="ui-interactions" tabindex="-1">UI Interactions <a class="header-anchor" href="#ui-interactions" aria-label="Permalink to &quot;UI Interactions&quot;">​</a></h2><ul><li>Buttons use <code>Interaction</code> queries for hover/press states</li><li>Colors change on interaction (neon blue hover, purple press)</li><li>Text colors: Neon blue (#00d4ff) for titles/scores, white for buttons</li><li>Panels: Semi-transparent black (#00000080) with neon borders</li></ul><h2 id="word-rendering" tabindex="-1">Word Rendering <a class="header-anchor" href="#word-rendering" aria-label="Permalink to &quot;Word Rendering&quot;">​</a></h2><ul><li>Typed portions: Neon blue (#00d4ff)</li><li>Untyped portions: Dim gray (#808080)</li><li>Flash effects: Red-orange (#ff6b6b) for penalties, green for completions</li><li>Font size: 50px for words, 45-70px for UI text</li></ul><h2 id="scoring" tabindex="-1">Scoring <a class="header-anchor" href="#scoring" aria-label="Permalink to &quot;Scoring&quot;">​</a></h2><ul><li>Correct word completion: 10 points × word length</li><li>Backspace penalty: -2 points</li><li>Invalid input reset: -5 points</li><li>Negative scores allowed, instant fail if score &lt; 0</li></ul><h2 id="configuration-config-rs" tabindex="-1">Configuration (<code>config.rs</code>) <a class="header-anchor" href="#configuration-config-rs" aria-label="Permalink to &quot;Configuration (`config.rs`)&quot;">​</a></h2><ul><li><code>WINDOW_WIDTH</code>: 800.0</li><li><code>WINDOW_HEIGHT</code>: 600.0</li><li><code>FONT_SIZE</code>: 50.0 (word size)</li><li><code>FALL_SPEED</code>: 100.0 (pixels/second)</li><li><code>FADE_DURATION</code>: 1.0 (seconds)</li></ul><h2 id="word-list-words-rs" tabindex="-1">Word List (<code>words.rs</code>) <a class="header-anchor" href="#word-list-words-rs" aria-label="Permalink to &quot;Word List (`words.rs`)&quot;">​</a></h2><p>Contains 73 Rust/programming-related words for typing practice.</p><h2 id="state-management" tabindex="-1">State Management <a class="header-anchor" href="#state-management" aria-label="Permalink to &quot;State Management&quot;">​</a></h2><p>Uses Bevy&#39;s <code>States</code> for screen management. Transitions triggered by user input or timers.</p><h2 id="rendering" tabindex="-1">Rendering <a class="header-anchor" href="#rendering" aria-label="Permalink to &quot;Rendering&quot;">​</a></h2><ul><li>2D camera with default bundle</li><li>Text2dBundle for falling words</li><li>NodeBundle for UI panels</li><li>ButtonBundle for interactive elements</li></ul><h2 id="input-handling" tabindex="-1">Input Handling <a class="header-anchor" href="#input-handling" aria-label="Permalink to &quot;Input Handling&quot;">​</a></h2><ul><li><code>ReceivedCharacter</code>: For typed letters</li><li><code>KeyboardInput</code>: For backspace detection</li><li>Input processed in <code>typing_system</code> with character validation</li></ul><h2 id="animations" tabindex="-1">Animations <a class="header-anchor" href="#animations" aria-label="Permalink to &quot;Animations&quot;">​</a></h2><ul><li>Falling: Continuous downward movement</li><li>Fade-out: Alpha reduction over time</li><li>Flash: Temporary color override with timer</li><li>No particle effects or complex animations implemented</li></ul><h2 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h2><ul><li>Word reset on invalid input</li><li>Score penalties for mistakes</li><li>Entity existence checks before despawning (prevents B0003 warnings)</li></ul><h2 id="performance-considerations" tabindex="-1">Performance Considerations <a class="header-anchor" href="#performance-considerations" aria-label="Permalink to &quot;Performance Considerations&quot;">​</a></h2><ul><li>Words shuffled once per game start</li><li>Systems run conditionally based on state</li><li>Entities despawned after use</li></ul><h2 id="extensibility" tabindex="-1">Extensibility <a class="header-anchor" href="#extensibility" aria-label="Permalink to &quot;Extensibility&quot;">​</a></h2><ul><li>Easy to add new difficulties or word lists</li><li>UI screens modular and reusable</li><li>Systems separated by concern (UI, menu, gameplay)</li></ul><h2 id="build-and-run" tabindex="-1">Build and Run <a class="header-anchor" href="#build-and-run" aria-label="Permalink to &quot;Build and Run&quot;">​</a></h2><ul><li><code>cargo run</code>: Build and run the game</li><li><code>cargo check</code>: Verify compilation</li><li>Requires Rust 2024 edition</li></ul><p>This documentation provides a complete overview of COsuDE&#39;s codebase, interactions, and functionality for developers.</p>',54)])])}const p=o(n,[["render",s]]);export{h as __pageData,p as default};
