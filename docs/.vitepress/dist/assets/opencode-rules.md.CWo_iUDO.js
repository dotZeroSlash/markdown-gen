import{_ as o,c as t,o as a,ae as r}from"./chunks/framework.CBTkueSR.js";const p=JSON.parse('{"title":"rules","description":"Document from d:\\\\Documents\\\\rust-projects\\\\old\\\\COsuDE\\\\rules.md","frontmatter":{"title":"rules","description":"Document from d:\\\\Documents\\\\rust-projects\\\\old\\\\COsuDE\\\\rules.md","date":"2025-10-05T00:00:00.000Z"},"headers":[],"relativePath":"opencode-rules.md","filePath":"opencode-rules.md"}'),s={name:"opencode-rules.md"};function l(n,e,i,d,c,h){return a(),t("div",null,[...e[0]||(e[0]=[r('<h1 id="rules" tabindex="-1">Rules <a class="header-anchor" href="#rules" aria-label="Permalink to &quot;Rules&quot;">​</a></h1><ul><li>All tasks need to be put into the pending section of proposed.md before being worked on.</li><li>Once a task is started, move it to the accepted section of proposed.md.</li><li>Only once its move to accepted are you allowed to work on it and I have responded with the command [Execute the Plan].</li><li>If a task is rejected, move it to the rejected section of proposed.md, The task is not to be worked on at this time, I will respond with the command [Reject Compare] when I want to work on a task that was rejected.</li><li>You are only allowed to work on accepted tasks.</li><li>You should always cargo check and allow the user to verify the changes</li></ul><h1 id="workflow" tabindex="-1">Workflow <a class="header-anchor" href="#workflow" aria-label="Permalink to &quot;Workflow&quot;">​</a></h1><ul><li>First read rules.md (this file contains the rules for working on the project)</li><li>Second read developer-docs.md (this file contains the documentation for the project, when working on a task, you should use this file to understand the codebase and where to specifically target, do not break the codebase)</li><li>Third read proposed.md (this file contains the proposed changes to the project)</li></ul>',4)])])}const m=o(s,[["render",l]]);export{p as __pageData,m as default};
