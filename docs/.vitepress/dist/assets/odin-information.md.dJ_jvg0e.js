import{_ as e,c as n,o as i,ae as r}from"./chunks/framework.CBTkueSR.js";const g=JSON.parse('{"title":"answers","description":"Document from d:\\\\Documents\\\\odin-projects\\\\explore-odin\\\\docs\\\\answers.md","frontmatter":{"title":"answers","description":"Document from d:\\\\Documents\\\\odin-projects\\\\explore-odin\\\\docs\\\\answers.md","date":"2025-10-05T00:00:00.000Z"},"headers":[],"relativePath":"odin-information.md","filePath":"odin-information.md"}'),t={name:"odin-information.md"};function d(s,o,a,c,l,p){return i(),n("div",null,[...o[0]||(o[0]=[r('<h1 id="answers-to-odin-questions" tabindex="-1">Answers to Odin Questions <a class="header-anchor" href="#answers-to-odin-questions" aria-label="Permalink to &quot;Answers to Odin Questions&quot;">â€‹</a></h1><ol><li><p><strong>How do you do anything asynchronously in Odin? if await/async isn&#39;t a thing, how do you do it?</strong><br> Odin lacks built-in async/await. Use threads from the <code>thread</code> package for concurrency, or implement custom coroutines. For I/O, rely on blocking operations or external libraries.</p></li><li><p><strong>What does a loop look like in Odin?</strong><br> Range-based: <code>for i in 0..&lt;10 { ... }</code><br> C-style: <code>for i := 0; i &lt; 10; i += 1 { ... }</code></p></li><li><p><strong>How do you do a conditional in Odin?</strong><br><code>if condition { ... } else if other_condition { ... } else { ... }</code></p></li><li><p><strong>How do you do a function in Odin?</strong><br><code>proc name(params) -&gt; return_type { body }</code></p></li><li><p><strong>How do you do a class in Odin?</strong><br> No classes; use structs with associated procedures: <code>MyStruct :: struct { ... }</code> and <code>proc (s: ^MyStruct) method() { ... }</code></p></li><li><p><strong>How do you do a module in Odin?</strong><br> Each file is a module; import with <code>import &quot;path/to/module&quot;</code></p></li><li><p><strong>How do you do a package in Odin?</strong><br> Declare at the top: <code>package my_package;</code></p></li><li><p><strong>How do you do a library in Odin?</strong><br> Compile code into libraries using Odin&#39;s compiler (e.g., <code>odin build -build-mode:static</code> for static libs).</p></li><li><p><strong>How do you do a macro in Odin?</strong><br> No macros; use procedures, constants, or external build tools for code generation.</p></li><li><p><strong>How do you do a template in Odin?</strong><br> No templates; use parametric polymorphism (generics).</p></li><li><p><strong>How do you do a generic in Odin?</strong><br><code>proc name($T: typeid) (param: T) -&gt; T { ... }</code></p></li><li><p><strong>How do you do a trait in Odin?</strong><br> No traits; use unions, <code>any</code> type, or runtime assertions for polymorphism.</p></li><li><p><strong>How do you define a type in Odin?</strong><br><code>MyType :: struct { ... }</code> or <code>MyType :: i32</code> (alias).</p></li><li><p><strong>How do you define a constant in Odin?</strong><br><code>MY_CONST :: 42</code></p></li><li><p><strong>How do you define a variable in Odin?</strong><br><code>var: int = 10</code> or <code>var := 10</code> (type inferred).</p></li><li><p><strong>How do you define a pointer in Odin?</strong><br><code>ptr: ^int = &amp;var</code></p></li><li><p><strong>How do you define an array in Odin?</strong><br><code>arr: [5]int = {1,2,3,4,5}</code></p></li><li><p><strong>How do you define a slice in Odin?</strong><br><code>slice: []int = arr[:]</code> or <code>slice = make([]int, len)</code></p></li><li><p><strong>How do you define a map in Odin?</strong><br><code>m: map[string]int</code> (requires <code>core:container</code> or similar).</p></li><li><p><strong>How do you define a struct in Odin?</strong><br><code>Person :: struct { name: string, age: int }</code></p></li><li><p><strong>How do you define an enum in Odin?</strong><br><code>Color :: enum { Red, Green, Blue }</code></p></li><li><p><strong>How do you define an interface in Odin?</strong><br> No interfaces; use <code>any</code> type or unions with type assertions for dynamic behavior.</p></li></ol>',2)])])}const m=e(t,[["render",d]]);export{g as __pageData,m as default};
