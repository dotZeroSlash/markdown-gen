import{_ as t,c as a,o as i,ae as n}from"./chunks/framework.CBTkueSR.js";const u=JSON.parse('{"title":"ARCHITECTURE","description":"Document from d:\\\\Documents\\\\rust-projects\\\\old\\\\luna-sama\\\\docs\\\\ARCHITECTURE.md","frontmatter":{"title":"ARCHITECTURE","description":"Document from d:\\\\Documents\\\\rust-projects\\\\old\\\\luna-sama\\\\docs\\\\ARCHITECTURE.md","date":"2025-10-05T00:00:00.000Z"},"headers":[],"relativePath":"architecture.md","filePath":"architecture.md"}'),r={name:"architecture.md"};function o(s,e,l,c,p,h){return i(),a("div",null,[...e[0]||(e[0]=[n('<h1 id="luna-sama-architecture-overview" tabindex="-1">Luna Sama Architecture Overview <a class="header-anchor" href="#luna-sama-architecture-overview" aria-label="Permalink to &quot;Luna Sama Architecture Overview&quot;">​</a></h1><p>This document provides a high-level overview of the Luna Sama codebase architecture, including the step numbering system used throughout the code comments.</p><h2 id="project-structure" tabindex="-1">Project Structure <a class="header-anchor" href="#project-structure" aria-label="Permalink to &quot;Project Structure&quot;">​</a></h2><p>Luna Sama is organized into the following key components:</p><ul><li><strong>Main Application Entry</strong> (<code>src/main.rs</code>): Command-line interface and application startup</li><li><strong>Core Application Logic</strong> (<code>src/lib.rs</code>): Main application structure and lifecycle management</li><li><strong>LLM Services</strong> (<code>src/llm/</code>): Language model integration with Ollama</li><li><strong>Text-to-Speech</strong> (<code>src/tts/</code>): Voice generation components</li><li><strong>Avatar System</strong> (<code>src/avatar/</code>): Visual representation of the AI character</li><li><strong>Game Integration</strong> (<code>src/game/</code>): Optional game integration features</li><li><strong>Utilities</strong> (<code>src/utils/</code>): Configuration and helper functions</li></ul><h2 id="step-numbering-system" tabindex="-1">Step Numbering System <a class="header-anchor" href="#step-numbering-system" aria-label="Permalink to &quot;Step Numbering System&quot;">​</a></h2><p>To make the codebase more navigable and document the execution flow, we use a phased step numbering system. This allows anyone reading the code to understand both the local context of a function and its place in the overall application flow.</p><h3 id="phase-1-application-entry-main-rs" tabindex="-1">Phase 1: Application Entry (main.rs) <a class="header-anchor" href="#phase-1-application-entry-main-rs" aria-label="Permalink to &quot;Phase 1: Application Entry (main.rs)&quot;">​</a></h3><p>Steps 1.1-1.8 cover the command-line parsing, configuration loading, and main application bootstrap.</p><ul><li><strong>Step 1.1-1.3</strong>: Parse command-line arguments and initialize logging</li><li><strong>Step 1.4-1.5</strong>: Handle configuration management</li><li><strong>Step 1.6-1.8</strong>: Create, initialize and run the application</li></ul><h3 id="phase-2-core-components-lib-rs" tabindex="-1">Phase 2: Core Components (lib.rs) <a class="header-anchor" href="#phase-2-core-components-lib-rs" aria-label="Permalink to &quot;Phase 2: Core Components (lib.rs)&quot;">​</a></h3><p>Steps 2.1-2.7 cover the core application structure, initialization and execution.</p><ul><li><strong>Step 2.1-2.2</strong>: Module imports and dependencies</li><li><strong>Step 2.3</strong>: Application instance creation and component initialization</li><li><strong>Step 2.4</strong>: Component initialization</li><li><strong>Step 2.5</strong>: Message processing pipeline</li><li><strong>Step 2.6</strong>: Main application loop execution</li><li><strong>Step 2.7</strong>: Application shutdown</li></ul><h3 id="phase-3-llm-service-llm-rs" tabindex="-1">Phase 3: LLM Service (llm/*.rs) <a class="header-anchor" href="#phase-3-llm-service-llm-rs" aria-label="Permalink to &quot;Phase 3: LLM Service (llm/*.rs)&quot;">​</a></h3><p>Steps 3.1-3.11 cover the language model integration and conversation management.</p><ul><li><strong>Step 3.1-3.4</strong>: Ollama client initialization and API interactions</li><li><strong>Step 3.5-3.11</strong>: Conversation context management</li></ul><h3 id="phase-4-text-to-speech-tts-rs" tabindex="-1">Phase 4: Text-to-Speech (tts/*.rs) <a class="header-anchor" href="#phase-4-text-to-speech-tts-rs" aria-label="Permalink to &quot;Phase 4: Text-to-Speech (tts/*.rs)&quot;">​</a></h3><p>Steps 4.1-4.x cover the voice generation system.</p><h3 id="phase-5-avatar-system-avatar-rs" tabindex="-1">Phase 5: Avatar System (avatar/*.rs) <a class="header-anchor" href="#phase-5-avatar-system-avatar-rs" aria-label="Permalink to &quot;Phase 5: Avatar System (avatar/*.rs)&quot;">​</a></h3><p>Steps 5.1-5.x cover the visual avatar component.</p><h3 id="phase-6-game-integration-game-rs" tabindex="-1">Phase 6: Game Integration (game/*.rs) <a class="header-anchor" href="#phase-6-game-integration-game-rs" aria-label="Permalink to &quot;Phase 6: Game Integration (game/*.rs)&quot;">​</a></h3><p>Steps 6.1-6.x cover the optional game integration features.</p><h2 id="maintaining-this-structure" tabindex="-1">Maintaining This Structure <a class="header-anchor" href="#maintaining-this-structure" aria-label="Permalink to &quot;Maintaining This Structure&quot;">​</a></h2><p>When adding new code:</p><ol><li>Identify which phase the code belongs to</li><li>Use the appropriate phase number as the prefix</li><li>Continue the sequential numbering within that phase</li><li>For nested steps, add another level (e.g., 2.3.7)</li></ol><p>This documentation should be updated if major architectural changes are made to the application.</p>',26)])])}const d=t(r,[["render",o]]);export{u as __pageData,d as default};
